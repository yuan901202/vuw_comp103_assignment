#BlueJ class context
comment0.params=
comment0.target=Genealogy()
comment1.params=
comment1.target=void\ loadData()
comment1.text=\ Load\ the\ information\ from\ the\ file\ "database.txt".\n\ \ \ \ Each\ line\ of\ the\ file\ has\ information\ about\ one\ person\:\n\ \ \ \ name,\ year\ of\ birth,\ mother's\ name,\ father's\ name\n\ \ \ \ (note\:\ a\ '-'\ instead\ of\ a\ name\ means\ \ the\ mother\ or\ father\ are\ unknown)\n\ \ \ \ For\ each\ line,\n\ \ \ \ -\ construct\ a\ new\ Person\ with\ the\ information,\ and\ add\ to\ the\ names\ map.\n\ \ \ \ -\ if\ there\ is\ a\ find\ the\ \ \ \n\ \ \ \ and\ add\ the\ person\ to\ the\ people\ map,\ \n
comment10.params=args
comment10.target=void\ main(java.lang.String[])
comment2.params=
comment2.target=void\ populateChildrenMap()
comment2.text=\ [Completion]\ Find\ all\ the\ children\ of\ all\ the\ people\ in\ the\ database,\ and\ put\ them\ in\ the\ children\ map\n\ \ \ \ Iterate\ through\ all\ the\ people\:\n\ \ \ \ if\ the\ person\ has\ a\ mother,\ then\ add\ the\ person\ to\ the\ mother's\ children\ \nif\ the\ person\ has\ a\ father,\ then\ add\ the\ person\ to\ the\ father's\ children
comment3.params=
comment3.target=void\ printAll()
comment3.text=Prints\ out\ all\ the\ people\ in\ the\ database
comment4.params=person\ indent
comment4.target=void\ printAncestorTree(Person,\ java.lang.String)
comment4.text=\ Print\ out\ all\ the\ ancestors\ of\ a\ person.\n\ \ \ \ To\ print\ an\ ancestors\ tree,\ you\ must\ print\ the\n\ \ \ \ person\ (if\ it\ is\ not\ null),\ and\ then\n\ \ \ \ print\ the\ ancestor\ trees\ of\ the\ mother\ and\ then\ the\ father\n\ \ \ \ (with\ a\ larger\ indent\ than\ the\ person\ had).\n\ \ \ \ Needs\ to\ be\ recursive.\n
comment5.params=person\ ancestors
comment5.target=void\ findFemaleLineage(Person,\ java.util.List)
comment5.text=\ Constructs\ a\ list\ of\ the\ female\ lineage\ of\ a\ person\ (the\ mother,\n\ \ the\ mother's\ mother,\ the\ mother's\ mother's\ mother,\ etc).\n\ \ It\ is\ given\ an\ empty\ list,\ and\ is\ should\ add\ these\ people\ to\ the\ list.\n\ \ Do\ it\ recursively\!\n
comment6.params=person\ ancestors
comment6.target=void\ findMaleLineage(Person,\ java.util.List)
comment6.text=\ Constructs\ a\ list\ of\ the\ male\ lineage\ of\ a\ person\ (the\ father,\n\ \ the\ father's\ father,\ the\ father's\ father's\ father,\ etc).\n\ \ It\ is\ given\ an\ empty\ list,\ and\ is\ should\ add\ these\ people\ to\ the\ list.\n\ \ Do\ it\ recursively\!\n
comment7.params=person\ indent
comment7.target=void\ printDescendantTree(Person,\ java.lang.String)
comment7.text=\ [Completion]\ Print\ out\ all\ the\ descendants\ of\ a\ person.\n\ \ \ \ Requires\ that\ the\ populateChildrenMap\ method\ has\ been\ completed\n\ \ \ \ which\ adds\ all\ their\ children\ to\ each\ person\ in\ the\ database.\n\ \ \ \ To\ print\ a\ descendant\ tree,\ you\ must\ print\ the\ person,\ and\ then\n\ \ \ \ print\ the\ descendent\ tree\ of\ each\ child\ of\ the\ person\ (indented\n\ \ \ \ a\ bit\ more).\n\ \ \ \ Needs\ to\ be\ recursive.\n
comment8.params=f\ name
comment8.target=void\ textFieldPerformed(java.lang.String,\ java.lang.String)
comment9.params=button
comment9.target=void\ buttonPerformed(java.lang.String)
numComments=11
