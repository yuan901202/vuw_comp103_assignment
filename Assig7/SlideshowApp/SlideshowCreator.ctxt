#BlueJ class context
comment0.params=
comment0.target=SlideshowCreator()
comment0.text=\n\ \n
comment1.params=
comment1.target=void\ showCreatorUI()
comment10.params=
comment10.target=void\ removeImage()
comment10.text=\n\ For\ the\ core\ part\ of\ the\ assignment.\n\ \n\ remove\ the\ image\ file\ (name)\ at\ the\ currently\ selected\ index.\ \n\ The\ numerical\ value\ of\ the\ currently\ selected\ index\ should\ still\ point\ to\ a\ valid\ place\ in\ the\ list\ after\ this\ method,\ or\ \n\ 0\ in\ the\ case\ where\ the\ list\ ends\ up\ empty\ after\ deletion\ of\ the\ node.\ \n\ \n\ HINT\:\ You\ should\ treat\ removing\ at\ the\ very\ start\ of\ the\ list\ (or\ from\ an\ empty\ list)\ as\ a\ special\ case.\ \n\ HINT\:\ The\ iterative\ version\ of\ the\ remove\ method\ that\ you\ will\ write\ in\ the\ ImageNode\ is\ private,\ so\ you'll\ need\ to\ call\ the\ \n\ wrapper\ add\ method\ that\ I\ have\ created,\ that\ then\ switches\ between\ your\ iterative\ and\ (later)\ recursive\ versions.\n\ \n
comment11.params=
comment11.target=void\ moveSelectionRight()
comment11.text=\n\ increment\ the\ current\ selected\ index,\ assuming\ that\ it\ is\ not\ already\ at\ the\ end\ of\ the\ list,\ and\ redraw\ the\ graphics\ display.,\ \n
comment12.params=
comment12.target=void\ moveSelectionToEnd()
comment12.text=\n\ change\ the\ current\ selected\ index\ to\ the\ last\ node,\ and\ redraw\ the\ graphics\ display.\n
comment13.params=
comment13.target=void\ moveSelectionToStart()
comment13.text=\n\ change\ the\ current\ selected\ index\ to\ be\ the\ first\ node,\ and\ redraw\ the\ graphics\ display.\n
comment14.params=
comment14.target=void\ moveSelectionLeft()
comment14.text=\n\ decrement\ the\ current\ selected\ index,\ assuming\ it\ is\ not\ already\ at\ the\ start\ of\ the\ list,\ and\ redraw\ the\ graphics\ display.\n
comment15.params=
comment15.target=void\ redraw()
comment15.text=\n\ draws\ the\ list\ of\ image\ thumbnails\ on\ the\ graphics\ window.\ The\ size\ of\ each\ thumbnail\ should\ reduce\ with\ the\ size\ of\ the\ \n\ list,\ so\ that\ all\ of\ the\ thumbnails\ can\ fit\ on\ the\ graphics\ window.\ There\ are\ some\ static\ final\ fields\ in\ the\ SlideshowCreator\ \n\ class\ that\ you\ may\ find\ useful\ in\ this\ regard.\ \n\ \n\ Note\ that\ the\ currently\ selected\ index\ and\ the\ immediate\ neighbours\ should\ be\ highlighted\ in\ some\ way.\ The\ demo\ does\ this\ by\ \n\ making\ the\ thumbnail\ image\ at\ the\ currently\ selected\ index\ twice\ the\ size\ of\ an\ ordinary\ thumbnail,\ with\ the\ immediate\ \n\ neighbour\ on\ either\ side\ one\ and\ a\ half\ times\ the\ size\ of\ an\ ordinary\ thumbnail.\n
comment2.params=
comment2.target=void\ hideCreatorUI()
comment3.params=name
comment3.target=void\ buttonPerformed(java.lang.String)
comment3.text=\n\ This\ method\ calls\ the\ relevant\ helper\ method\ for\ whichever\ button\ was\ pressed.\n\ The\ method\ will\ first\ check\ that\ it\ is\ the\ currently\ active\ mode\ in\ the\ program,\ \n\ other\ it\ will\ ignore\ the\ call\ to\ buttonPerformed(...)\n\ \n\ @param\ name\ the\ name\ of\ the\ button\ pressed.\n
comment4.params=
comment4.target=ImageNode\ getList()
comment4.text=\n\ @return\ returns\ the\ first\ node\ in\ the\ linked\ list\ data\ structure.\n
comment5.params=
comment5.target=void\ reverseList()
comment5.text=\n\ For\ the\ completion\ part\ of\ the\ assignment.\n\ \n\ Reverses\ the\ order\ of\ this\ singly-linked\ list,\ so\ that\ the\ last\ node\ is\ now\ the\ first\ node,\ and\ \n\ and\ the\ second-to-last\ node\ is\ the\ second\ node,\ and\ so\ on.\ Note\ that\ the\ image\ currently\ selected\n\ should\ remain\ the\ image\ currently\ selected\ even\ after\ the\ list\ is\ reversed.\ This\ means\ that\ \n\ the\ selectedIndex\ field\ may\ need\ to\ change\ value.\n
comment6.params=current\ last
comment6.target=ImageNode\ reverse(ImageNode,\ ImageNode)
comment7.params=front
comment7.target=ImageNode\ reverseIter(ImageNode)
comment8.params=
comment8.target=void\ clearList()
comment8.text=\n\ For\ the\ core\ part\ of\ the\ assignment.\n\ \n\ Make\ the\ list\ empty.\n
comment9.params=
comment9.target=void\ addImage()
comment9.text=\n\ For\ the\ core\ part\ of\ the\ assignment.\n\ \n\ ask\ for\ an\ image\ file\ to\ be\ selected\ from\ the\ filesystem,\ and\ then\ add\ the\ name\ of\ the\ image\ file\ to\ the\ list\ at\ the\ currently\ selected\ index.\ \n\ The\ numerical\ value\ of\ the\ currently\ selected\ index\ should\ not\ change.\ \n\ \n\ HINT\:\ You\ should\ treat\ inserting\ at\ the\ very\ start\ of\ the\ list\ as\ a\ special\ case.\ \n\ HINT\:\ The\ iterative\ version\ of\ the\ add\ method\ that\ you\ will\ write\ in\ the\ ImageNode\ is\ private,\ so\ you'll\ need\ to\ call\ the\ \n\ wrapper\ add\ method\ that\ I\ have\ created,\ that\ then\ switches\ between\ your\ iterative\ and\ (later)\ recursive\ versions.\n\ \n
numComments=16
