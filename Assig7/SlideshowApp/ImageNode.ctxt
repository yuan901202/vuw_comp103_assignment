#BlueJ class context
comment0.params=imageNameStr\ nextNode
comment0.target=ImageNode(java.lang.String,\ ImageNode)
comment0.text=\n\ Constructor\ for\ objects\ of\ class\ ImageNode\n
comment1.params=
comment1.target=java.lang.String\ getName()
comment10.params=pos
comment10.target=void\ removeRec(int)
comment10.text=\n\ For\ the\ completion\ part\ of\ the\ assignment.\n\ \n\ Using\ recursion,\ remove\ the\ node\ at\ the\ index\ position\ specified\ in\ the\ integer\ parameter.\n\n
comment11.params=pos
comment11.target=void\ removeIter(int)
comment11.text=\n\ For\ the\ core\ part\ of\ the\ assignment.\n\ \n\ Using\ an\ iterative\ approach,\ remove\ the\ node\ at\ the\ index\ position\ specified\ in\ the\ integer\ parameter.\n\n
comment12.params=pos
comment12.target=java.lang.String\ getNameRec(int)
comment12.text=\n\ For\ the\ completion\ part\ of\ the\ assignment.\n\ \n\ Using\ recursion,\ retrieve\ the\ string\ stored\ in\ the\ node\ at\ index\ 'pos'.\ \n\n\ @param\ pos\ an\ index\ into\ the\ list,\ with\ 0\ being\ the\ index\ of\ the\ first\ node\ in\ the\ whole\ list.\n\ @return\ the\ string\ at\ position\ 'pos',\ or\ null\ if\ there\ is\ no\ such\ string\ or\ node.\n
comment13.params=pos
comment13.target=java.lang.String\ getNameIter(int)
comment13.text=\n\ For\ the\ core\ part\ of\ the\ assignment.\n\ \n\ Using\ an\ iterative\ approach,\ retrieve\ the\ string\ stored\ in\ the\ node\ at\ index\ 'pos'.\ \n\n\ @param\ pos\ an\ index\ into\ the\ list,\ with\ 0\ being\ the\ index\ of\ the\ first\ node\ in\ the\ whole\ list.\n\ @return\ the\ string\ at\ position\ 'pos',\ or\ null\ if\ there\ is\ no\ such\ string\ or\ node.\n
comment14.params=
comment14.target=int\ sizeRec()
comment14.text=\n\ For\ the\ completion\ part\ of\ the\ assignment.\n\ \n\ Using\ recursion,\ calculate\ the\ size\ of\ the\ list\ starting\ from\ this\ node.\n\n
comment15.params=
comment15.target=int\ sizeIter()
comment15.text=\n\ For\ the\ core\ part\ of\ the\ assignment.\n\ \n\ Using\ an\ iterative\ approach,\ calculate\ the\ size\ of\ the\ list\ starting\ from\ this\ node.\n\n
comment2.params=
comment2.target=ImageNode\ getNext()
comment3.params=newNext
comment3.target=void\ setNext(ImageNode)
comment4.params=pos
comment4.target=void\ remove(int)
comment4.text=\n\ This\ public\ remove\ method\ can\ be\ called\ from\ outside\ this\ class,\ and\ then\ switches\ between\ using\ the\ \n\ iterative\ or\ recursive\ private\ implementations\ of\ the\ method\ depending\ on\ the\ value\ of\ a\ boolean\ field\ in\ the\ \n\ SlideshowApp\ class.\n\ \n\ The\ node\ at\ index\ 'pos'\ should\ be\ removed\ from\ the\ list.\n\ \n\ @param\ pos\ an\ index\ in\ the\ list.\ \n
comment5.params=imageFileStr\ pos
comment5.target=void\ add(java.lang.String,\ int)
comment5.text=\n\ This\ public\ add\ method\ can\ be\ called\ from\ outside\ this\ class,\ and\ then\ switches\ between\ using\ the\ \n\ iterative\ or\ recursive\ private\ implementations\ of\ the\ method\ depending\ on\ the\ value\ of\ a\ boolean\ field\ in\ the\ \n\ SlideshowApp\ class.\n\ \n\ The\ string\ is\ then\ added\ to\ a\ newly\ created\ node\ that\ will\ be\ placed\ at\ index\ 'pos'.\ Whatever\ was\ already\ \n\ at\ that\ index\ becomes\ the\ next\ node\ after\ the\ newly\ created\ node.\n\ \n\ @param\ imageFileStr\ the\ string\ representing\ the\ full\ filename\ of\ the\ image\ added\ to\ the\ list.\n\ @param\ pos\ an\ index\ in\ the\ list.\ \n
comment6.params=pos
comment6.target=java.lang.String\ getName(int)
comment6.text=\n\ This\ public\ getName\ method\ can\ be\ called\ from\ outside\ this\ class,\ and\ then\ switches\ between\ using\ the\ \n\ iterative\ or\ recursive\ private\ implementations\ of\ the\ method\ depending\ on\ the\ value\ of\ a\ boolean\ field\ in\ the\ \n\ SlideshowApp\ class.\n\ \n\ The\ value\ of\ the\ string\ at\ index\ 'pos'\ is\ returned.\ Will\ return\ a\ null\ reference\ if\ pos\ is\ invalid.\n\ \n\ @param\ pos\ an\ index\ in\ the\ list.\ \n
comment7.params=
comment7.target=int\ size()
comment7.text=\n\ This\ public\ size\ method\ can\ be\ called\ from\ outside\ this\ class,\ and\ then\ switches\ between\ using\ the\ \n\ iterative\ or\ recursive\ private\ implementations\ of\ the\ method\ depending\ on\ the\ value\ of\ a\ boolean\ field\ in\ the\ \n\ SlideshowApp\ class.\n\ \n\ \n\ @return\ the\ number\ of\ nodes\ in\ the\ list\ starting\ at\ this\ node.\n
comment8.params=imageFileStr\ pos
comment8.target=void\ addRec(java.lang.String,\ int)
comment8.text=\n\ For\ the\ completion\ part\ of\ the\ assignment.\n\ \n\ Using\ recursion,\ create\ a\ new\ node\ with\ the\ string\ parameter\ stored\ in\ it,\ at\ the\ index\ position\ \n\ specified\ in\ the\ integer\ parameter.\ The\ old\ node\ at\ the\ index\ position\ should\ now\ follow\ the\ newly\ inserted\n\ node.\n\n
comment9.params=imageFileStr\ pos
comment9.target=void\ addIter(java.lang.String,\ int)
comment9.text=\n\ For\ the\ core\ part\ of\ the\ assignment.\n\ \n\ Using\ an\ iterative\ approach,\ create\ a\ new\ node\ with\ the\ string\ parameter\ stored\ in\ it,\ at\ the\ index\ position\ \n\ specified\ in\ the\ integer\ parameter.\ The\ old\ node\ at\ the\ index\ position\ should\ now\ follow\ the\ newly\ inserted\n\ node.\n\n
numComments=16
