/* Code for COMP 103, Assignment 7
 * Name: Tianfu Yuan
 * Usercode: yuantian
 * ID: 300228072
 */

import comp102.*;

/**
 * This class contains the main method of the program. 
 * This class also sets up the buttons in the UI, and creates objects to represent the creator and the 
 * viewer. These creator and viewer objects are set up to be the listeners to the buttons that control 
 * that mode's behaviour. 
 * 
 * @author Stuart Marshall 
 * @version 18 September 2012
 */
public class SlideshowApp implements UIButtonListener
{
   private SlideshowViewer viewer;
   private SlideshowCreator creator;
   
   // boolean field that can be toggled between true and false depending on whether you want the 
   // recursive or iterative implementations of the linked list methods to be used.
   public static boolean isRecursive = false;
   
    /**
     * Constructor for objects of class SlideshowApp
     */
    public SlideshowApp()
    {
        creator = new SlideshowCreator();
        viewer = new SlideshowViewer();
    }

    /**
     * Initialises the UI window, and sets up the buttons and their listeners in the input pane. Note that there are 
     * different listeners for different buttons, as all of the buttons are only relevant to one mode (e.g. creator or viewer) 
     * or the other. As an exception, SlideshowApp is also set up to be the listener to the two buttons that control switching between the 
     * creator and the viewer modes, and starts the program in creator mode.

     */
    public void initialise() {
        UI.initialise();
        
        UI.addButton("SCREEN: start VIEWER", this);
        UI.addButton("SCREEN: back to CREATOR", this);
        UI.addButton("CREATOR: add image", this.creator);
        UI.addButton("CREATOR: remove image", this.creator);
        UI.addButton("CREATOR: clear list", this.creator);
        UI.addButton("CREATOR: reverse list", this.creator);
        UI.addButton("CREATOR: go to start", this.creator);
        UI.addButton("CREATOR: go to end", this.creator);   
        UI.addButton("CREATOR: move left", this.creator);
        UI.addButton("CREATOR: move right", this.creator);
        UI.addButton("VIEWER: next image", this.viewer);
        UI.addButton("VIEWER: previous image", this.viewer);
        UI.addButton("VIEWER: start show", this.viewer);
        
        this.viewer.hideViewerUI();
        this.creator.showCreatorUI();
        
    }
    
    /**
     * Supports switching between the two different modes. Note that switching to viewer mode also requires
     * the additional step of retrieving the list that was generated by the creator mode. 
     * 
     * Makes sure that only one mode is active at any one point in time, so that button presses for the 
     * hidden view don't accidentally perform actions. The hidden view's buttonPerformed method will still be called,
     * but logic in those methods will ensure no action takes place.
     */
    public void buttonPerformed(String name) {
        if (name.equals("SCREEN: start VIEWER")) {
            this.creator.hideCreatorUI();
            this.viewer.showViewerUI(this.creator.getList());
        } else if (name.equals("SCREEN: back to CREATOR")) {
            this.viewer.hideViewerUI();
            this.creator.showCreatorUI();
        }
    }
    
    public static void main(String[] args) {
        SlideshowApp app = new SlideshowApp();
        app.initialise();
    }
    
}
