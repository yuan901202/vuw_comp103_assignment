#BlueJ class context
comment0.params=
comment0.target=void\ testSorts()
comment0.text=\ Example\ method\ for\ testing\ and\ timing\ sorting\ algorithms.\n\ \ You\ will\ need\ to\ modify\ and\ extend\ this\ heavily\ to\ do\ your\n\ \ performance\ testing.\ It\ should\ probably\ run\ tests\ on\ each\ of\ the\ algorithms,\n\ \ on\ different\ sized\ arrays,\ and\ multiple\ times\ on\ each\ size.\n\ \ Make\ sure\ you\ create\ a\ new\ array\ each\ time\ you\ sort\ -\ it\ is\ not\ a\ good\ test\ if\n\ \ you\ resort\ the\ same\ array\ after\ it\ has\ been\ sorted.\n\ \ Hint\:\ if\ you\ want\ to\ copy\ an\ array,\ use\ copyArray\ (below)\n
comment1.params=
comment1.target=void\ testAllSorts()
comment10.params=data
comment10.target=void\ bubbleSort(java.lang.String[])
comment10.text=Sorts\ the\ elements\ of\ an\ array\ of\ String\ using\ bubble\ sort
comment11.params=data
comment11.target=void\ bubbleSort1(java.lang.String[])
comment11.text=\ Sorts\ the\ elements\ of\ an\ array\ of\ String\ using\ bubble\ sort,\ \nthe\ last\ index\ on\ each\ sweep\ where\ it\ did\ a\ swap,\ and\ moves\ top\ down\ to\ that\ index\ at\ the\ end\ of\ the\ sweep
comment12.params=data
comment12.target=void\ bubbleSort2(java.lang.String[])
comment12.text=\ Sorts\ the\ elements\ of\ an\ array\ of\ String\ using\ bubble\ sort,\ \n\ \ \ \ \ \ \ the\ last\ index\ on\ each\ sweep\ where\ it\ did\ a\ swap,\ and\ moves\ top\ down\ to\ that\ index\ at\ the\ end\ of\ the\ sweep,\nfirst\ sweeping\ to\ the\ right\ and\ then\ sweeping\ to\ the\ left
comment13.params=data
comment13.target=void\ mergeSort(java.lang.String[])
comment13.text=\ non-recursive,\ wrapper\ method\n\ \ copy\ data\ array\ into\ a\ temporary\ array\ \n\ \ call\ recursive\ mergeSort\ method\ \ \ \ \ \n
comment14.params=data\ temp\ low\ high
comment14.target=void\ mergeSort(java.lang.String[],\ java.lang.String[],\ int,\ int)
comment14.text=Recursive\ mergeSort\ method
comment15.params=data
comment15.target=void\ mergeSortIter(java.lang.String[])
comment15.text=Iterative\ mergeSort\ method
comment16.params=from\ to\ low\ mid\ high
comment16.target=void\ merge(java.lang.String[],\ java.lang.String[],\ int,\ int,\ int)
comment16.text=\ Merge\ method\n\ \ Merge\ from[low..mid-1]\ with\ from[mid..high-1]\ into\ to[low..high-1]\n\ \ Print\ data\ array\ after\ merge\ using\ printData\n
comment17.params=data
comment17.target=void\ quickSort(java.lang.String[])
comment17.text=Quick\ sort\ recursive\ call
comment18.params=data\ low\ high
comment18.target=void\ quickSort(java.lang.String[],\ int,\ int)
comment19.params=data\ low\ high
comment19.target=int\ partition(java.lang.String[],\ int,\ int)
comment19.text=\ Partition\ into\ small\ items\ (low..mid-1)\ and\ large\ items\ (mid..high-1)\ \n\ \ Print\ data\ array\ after\ partition\n
comment2.params=data\ name\ description
comment2.target=void\ testSort(java.lang.String[],\ java.lang.String,\ java.lang.String)
comment20.params=data
comment20.target=void\ quickSortIns(java.lang.String[])
comment20.text=quicksort\ with\ the\ median\ of\ three\ values\ (low,\ mid,\ high)\ of\ the\ subrange
comment21.params=data\ low\ high
comment21.target=void\ quickSortIns(java.lang.String[],\ int,\ int)
comment22.params=data\ low\ high
comment22.target=void\ insertionSort(java.lang.String[],\ int,\ int)
comment22.text=use\ insertion\ sort\ onece\ a\ subrange\ gets\ small
comment23.params=data\ low\ high
comment23.target=int\ partitionMed(java.lang.String[],\ int,\ int)
comment23.text=partition\ into\ samll\ items
comment24.params=a\ b\ c
comment24.target=java.lang.String\ median(java.lang.String,\ java.lang.String,\ java.lang.String)
comment24.text=find\ the\ median\ of\ three\ values
comment25.params=data
comment25.target=void\ quickSort2(java.lang.String[])
comment25.text=\ Quick\ sort,\ second\ version\:\ \ simpler\ partition\ method\nfaster\ or\ slower?
comment26.params=data\ low\ high
comment26.target=void\ quickSort2(java.lang.String[],\ int,\ int)
comment27.params=data\ low\ high
comment27.target=int\ partition2(java.lang.String[],\ int,\ int)
comment28.params=data
comment28.target=boolean\ testSorted(java.lang.String[])
comment28.text=\ Tests\ whether\ an\ array\ is\ in\ sorted\ order\n
comment29.params=data
comment29.target=void\ printData(java.lang.String[])
comment3.params=data\ name
comment3.target=void\ doSort(java.lang.String[],\ java.lang.String)
comment30.params=size
comment30.target=java.lang.String[]\ createArray(int)
comment30.text=Constructs\ an\ array\ of\ Strings\ by\ making\ random\ String\ values
comment31.params=size\ filename
comment31.target=java.lang.String[]\ readArrayFromFile(int,\ java.lang.String)
comment31.text=Constructs\ an\ array\ of\ Strings\ by\ reading\ a\ file
comment32.params=data
comment32.target=java.lang.String[]\ copyArray(java.lang.String[])
comment32.text=Create\ a\ new\ copy\ of\ an\ array\ of\ data
comment33.params=data\ size
comment33.target=java.lang.String[]\ copyArray(java.lang.String[],\ int)
comment34.params=data
comment34.target=void\ reverseArray(java.lang.String[])
comment35.params=args
comment35.target=void\ main(java.lang.String[])
comment4.params=
comment4.target=void\ testASort()
comment5.params=data\ here\ there
comment5.target=void\ swap(java.lang.String[],\ int,\ int)
comment5.text=\ Swaps\ the\ specified\ elements\ of\ an\ array.\n\ \ Used\ in\ several\ of\ the\ sorting\ algorithms\n
comment6.params=data
comment6.target=void\ selectionSort(java.lang.String[])
comment6.text=Sorts\ the\ elements\ of\ an\ array\ of\ String\ using\ selection\ sort
comment7.params=data
comment7.target=void\ selectionSort2(java.lang.String[])
comment7.text=\ Sorts\ the\ elements\ of\ an\ array\ of\ String\ using\ selection\ sort,\ \nbuilds\ up\ a\ sorted\ list\ from\ the\ front\ and\ the\ back
comment8.params=data
comment8.target=void\ insertionSort(java.lang.String[])
comment8.text=Sorts\ the\ \ elements\ of\ an\ array\ of\ String\ using\ insertion\ sort
comment9.params=data
comment9.target=void\ insertionSort2(java.lang.String[])
comment9.text=\ Sorts\ the\ \ elements\ of\ an\ array\ of\ String\ using\ insertion\ sort,\ \nuse\ binary\ research\ to\ add\ an\ item\ to\ insert
numComments=36
