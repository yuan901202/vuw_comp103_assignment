#BlueJ class context
comment0.params=
comment0.target=BellsPizza()
comment0.text=\ Construct\ a\ new\ BellsPizza\ object,\ loads\ in\ destinations\ that\ the\ company\ delivers\ to\ (including\ delivery\ times),\ and\ then\ runs\ the\ simulation\ tests.\n
comment1.params=
comment1.target=void\ loadDestinations()
comment1.text=\ Load\ in\ destinations\ and\ delivery\ times\ from\ destinations.txt\n
comment2.params=
comment2.target=void\ runTests()
comment2.text=\ \n\ \ \ \ This\ method\ runs\ through\ each\ of\ the\ logs\ (currently\ "log...",\n\ \ \ \ change\ to\ "completLog..."\ for\ the\ completion\ code).\ Each\ log\ file\n\ \ \ \ is\ used\ to\ simulate\ handling\ a\ sequence\ of\ pizza\ orders\ over\n\ \ \ \ time.\ For\ each\ log\ file,\ the\ simulation\ is\ first\ run\ with\ an\n\ \ \ \ ordinary\ queue\ (using\ a\ standard\ linked\ list\ from\ the\ Java\n\ \ \ \ collections\ library),\ and\ then\ your\ HeapArrayQueue.\ For\ the\n\ \ \ \ challenge,\ you\ should\ uncomment\ the\ code\ that\ also\ uses\ the\n\ \ \ \ HeapLinkedQueue\ as\ well.\n
comment3.params=time\ logFile
comment3.target=Pizza\ readPizza(int,\ java.util.Scanner)
comment3.text=\n\ \ \ \ Reads\ a\ single\ pizza\ in\ from\ the\ log\ file,\ and\ then\ returns\ the\n\ \ \ \ data\ as\ a\ Pizza\ object.\ If\ there\ is\ no\ pizza\ order\ at\ this\ time,\n\ \ \ \ then\ we\ return\ null;\n
comment4.params=queue\ logFile
comment4.target=double\ run(java.util.Queue,\ java.util.Scanner)
comment4.text=\n\ \ \ \ Return\ the\ profit\ (if\ positive,\ or\ loss\ if\ negative)\ of\ handling\n\ \ \ \ the\ pizza\ orders\ contained\ in\ the\ log\ file,\ using\ the\ queue\ provided\n\ \ \ \ by\ the\ runTests()\ method\ above.\n
comment5.params=arguments
comment5.target=void\ main(java.lang.String[])
numComments=6
